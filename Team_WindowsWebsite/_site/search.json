[
  {
    "objectID": "Wind_Categorization.html",
    "href": "Wind_Categorization.html",
    "title": "Wind Devastation Categorization",
    "section": "",
    "text": "Our data is sourced from the National Oceanic and Atmospheric Administration (NOAA) Storm Event database. We used storm event data from the years 2008, 2013, and 2018, which can be downloaded here: NOAA Database. The data dictionary can be found here: Storm Event Data Dictionary.\nIn order to analyze the data from our years and events of interest, we filtered the .csv files to only include events that involved wind events. Since we were only looking at the relationship between wind event devastation and time, location, and wind magnitude, we removed all the columns that included data that did not contribute to these categories.\nIn terms of data cleaning, there was a lot of missing data. We removed all rows that had an NA in the columns of event type, state, month, magnitude and latitude because these columns are crucial to the machine learning model. In addition, if there were NA values in any of the devastation columns, we replaced it with the value of 0 and made the assumption that if the value was not filled out no damage or injuries occurred."
  },
  {
    "objectID": "Wind_Categorization.html#data-description",
    "href": "Wind_Categorization.html#data-description",
    "title": "Wind Devastation Categorization",
    "section": "",
    "text": "Our data is sourced from the National Oceanic and Atmospheric Administration (NOAA) Storm Event database. We used storm event data from the years 2008, 2013, and 2018, which can be downloaded here: NOAA Database. The data dictionary can be found here: Storm Event Data Dictionary.\nIn order to analyze the data from our years and events of interest, we filtered the .csv files to only include events that involved wind events. Since we were only looking at the relationship between wind event devastation and time, location, and wind magnitude, we removed all the columns that included data that did not contribute to these categories.\nIn terms of data cleaning, there was a lot of missing data. We removed all rows that had an NA in the columns of event type, state, month, magnitude and latitude because these columns are crucial to the machine learning model. In addition, if there were NA values in any of the devastation columns, we replaced it with the value of 0 and made the assumption that if the value was not filled out no damage or injuries occurred."
  },
  {
    "objectID": "Wind_Categorization.html#wind-event-devastation-categorization",
    "href": "Wind_Categorization.html#wind-event-devastation-categorization",
    "title": "Wind Devastation Categorization",
    "section": "Wind Event Devastation Categorization",
    "text": "Wind Event Devastation Categorization\nThere are six variables included in the calculation of the wind event devastation: direct deaths, indirect deaths, direct injury, indirect injury, damage to property, and damage to crops. Within each variable, we scaled each value to be from zero to one. Once each variable is scaled to be from zero to one, we summed them to get an aggregate statistic. Because many of the wind events had little damage, this value was often very small and hard to interpret. Since we’re interested in the devastation of wind events relative to other wind events, we decided to scale and bin the aggregate such that:\n\n0 - No Devastation\n1 - Minimal Devastation\n2 - Low Devastation\n3 - Moderate Devastation\n4 - Most Devastation\n\nTo scale the aggregate, we first set all rows with 0 for the aggregate value to be 0. Then, we removed all of these rows and found the quantiles of the aggregate statistic for the remaining rows. Any values in the first quartile were labeled as 1, any in the second as 2, any in the third as 3, and the remaining values in the fourth as 4. This made the aggregate more interpretable as a wind event devastation categorization."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Prediction of Extreme Weather Event Devastation",
    "section": "",
    "text": "Team Windows is comprised of Kate Brown, Cassie Chou, Grace Brooks, and Dhruthi Mandavilli.\nResearch Question\nCan we model extreme wind devastation (aggregate statistic including direct and indirect injury/deaths, damage to property, and damage to crops) based on factors like location, magnitude, time of year, etc.?\nMotivation\nWe seek to protect vulnerable communities by predicting storm devastation to allocate more resources and save lives through wind event preparation. Ultimately, we hope to preemptively reduce devastation and speed up recovery after the event.\nGoals\n\nUnderstand and visualize the relationship between wind event devastation and several characteristics of the event.\nCreate an aggregate statistic that represents wind event devastation.\nDevelop a machine learning model that would use relevant predictors, such as wind magnitude, storm time duration, and location, to predict this statistic.\nMake our results available and digestible to the public in this website.\n\nData Source\nOur data is sourced from the National Oceanic and Atmospheric Administration (NOAA) Storm Event database. We used storm event data from the years 2008, 2013, and 2018.\nMain Takeaways and Future Directions\nWe successfully created an aggregate statistic that represents wind event devastation. In the end, our model with the best hyperparameters had an accuracy of 0.6898446 and a kappa value – which measures how much better our model is than random chance (on a scale from 0 to 1) – of 0.4593361. The most important predictor variables were wind magnitude and the state the event took place in. These results indicate that our statistic for wind categorization can be predicted from our predictors, and that future work can be done to improve the model. This may include using different machine learning models and testing our model on different wind datasets to improve and test accuracy. One might also try different strategies for handling missing data – we chose to list everything missing in the devastation categorization as zero, but perhaps there are better strategies for this."
  },
  {
    "objectID": "Data_Visualization.html",
    "href": "Data_Visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "This page allows you to explore visualizations of our data to aid in your understanding our dataset and the wind devastation statistic. We include visualizations of our predictor variables, the variables included in the wind devastation statistic, and the wind devastation statistic itself. We also began exploring the relationship between the wind devastation characteristic and a few of our predictor variables."
  },
  {
    "objectID": "Data_Visualization.html#description",
    "href": "Data_Visualization.html#description",
    "title": "Data Visualization",
    "section": "",
    "text": "This page allows you to explore visualizations of our data to aid in your understanding our dataset and the wind devastation statistic. We include visualizations of our predictor variables, the variables included in the wind devastation statistic, and the wind devastation statistic itself. We also began exploring the relationship between the wind devastation characteristic and a few of our predictor variables."
  },
  {
    "objectID": "Data_Visualization.html#import-data",
    "href": "Data_Visualization.html#import-data",
    "title": "Data Visualization",
    "section": "Import Data",
    "text": "Import Data\n\ndata &lt;- read.csv(\"ML_wind_data.csv\")\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "Data_Visualization.html#wind-devastation-categorization",
    "href": "Data_Visualization.html#wind-devastation-categorization",
    "title": "Data Visualization",
    "section": "Wind Devastation Categorization",
    "text": "Wind Devastation Categorization\n\n\n\n\n\n\nNote\n\n\n\nDescription of Wind Devastation Categorization\n\n0 - No Devastation\n1 - Minimal Devastation\n2 - Low Devastation\n3 - Moderate Devastation\n4 - Most Devastation\n\n\n\n\nggplot(data, aes(x = scaled_aggregate)) +\n  geom_histogram(fill = \"darkmagenta\", color = \"black\") + \n  labs(x = \"Wind Devastation Categorization\", y = \"Count\", fill = \"Year\", title = \"Histogram of the Wind Devastation\\nCategorization\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\", subtitle = \"The majority of events had no devastation followed by\\nminimal devastation.\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 19), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nggplot(data, aes(x = scaled_aggregate, fill = factor(YEAR))) +\n  geom_histogram(binwidth = (max(data$scaled_aggregate, na.rm = TRUE) - min(data$scaled_aggregate, na.rm = TRUE)) / 15, \n                 alpha = 0.6, position = \"dodge\", boundary = 0, color = \"black\") +  \n  scale_fill_manual(values = c(\"2018\" = \"blue\", \"2008\" = \"red\", \"2013\" = \"green\")) +    labs(x = \"Wind Devastation Categorization\", y = \"Count\", fill = \"Year\", title = \"Histogram of the Devastation Categorization\\ngrouped by year\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\", subtitle  = \"Distribution by years are pretty similar but 2008 has the\\nmost devastation.\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 19), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 14), \n    axis.text.y = element_text(size = 17), \n    legend.text = element_text(size = 15),\n    legend.title = element_text(size = 18)) \n\n\n\n\n\n\n\n\n\nggplot(data, aes(x = scaled_aggregate, fill = factor(MONTH_NAME))) +\n  geom_histogram(binwidth = (max(data$scaled_aggregate, na.rm = TRUE) - min(data$scaled_aggregate, na.rm = TRUE)) / 15, \n                 alpha = 0.6, position = \"dodge\", boundary = 0)   + labs(x = \"Wind Devastation Categorization\", y = \"Count\", fill = \"Month\", title = \"Histogram of the Devastation Categorization\\ngrouped by month\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\", subtitle = \"Events during summer months appear to cause the most\\ndevastation.\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 15), \n    axis.title.y = element_text(size = 15), \n    axis.text.x = element_text(size = 14), \n    axis.text.y = element_text(size = 15), \n    legend.text = element_text(size = 10),\n    legend.title = element_text(size = 15)) \n\n\n\n\n\n\n\n\n\nggplot(data, aes(x = scaled_aggregate, fill = EVENT_TYPE)) +\n  geom_histogram(binwidth = (max(data$scaled_aggregate, na.rm = TRUE) - min(data$scaled_aggregate, na.rm = TRUE)) / 15, \n                 alpha = 0.6, position = \"dodge\", boundary = 0, color = \"black\")   + labs(x = \"Wind Devastation Categorization\", y = \"Count\", fill = \"Event Type\", title = \"Histogram of the Devastation Categorization\\ngrouped by event type\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\", subtitle = \"Majority of the data is from thunderstorm wind events.\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 19, face = \"bold\"), \n    plot.subtitle = element_text(size = 15), \n    axis.title.x = element_text(size = 17), \n    axis.title.y = element_text(size = 17), \n    axis.text.x = element_text(size = 12), \n    axis.text.y = element_text(size = 15), \n    legend.text = element_text(size = 10),\n    legend.title = element_text(size = 13))"
  },
  {
    "objectID": "Data_Visualization.html#predictor-variables",
    "href": "Data_Visualization.html#predictor-variables",
    "title": "Data Visualization",
    "section": "Predictor Variables",
    "text": "Predictor Variables\n\nggplot(data, aes(x = STATE)) +\n  geom_bar(fill = \"deepskyblue1\", color = \"black\") +\n  labs(title = \"Number of Extreme Wind Events by State\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"There is state-to-state variability of extreme wind event\\noccurrences.\",\n    x = \"U.S. State\",\n    y = \"Number of Extreme Wind Events\") +\n  theme_minimal() +\n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 19), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 6.5, \n      face = \"bold\", angle = 55, hjust = 1), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n\n\ndata$MONTH_NAME &lt;- factor(data$MONTH_NAME, \n                          levels = c(\"January\", \"February\", \n                                     \"March\", \"April\", \"May\", \n                                     \"June\", \"July\", \"August\", \"September\", \"October\", \n                                     \"November\", \"December\"))\n\nggplot(data, aes(x = MONTH_NAME)) +\n  geom_bar(fill = \"deepskyblue2\", color = \"black\") +\n  labs(title = \"Number of Extreme Wind Events by Month\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Summer months have higher occurrences of extreme\\nwind events.\",\n    x = \"Month\",\n    y = \"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 19), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17, angle = 45, hjust = 1), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n\n\nggplot(data, aes(x = MAGNITUDE)) +\n  geom_histogram(binwidth = 10, fill = \"deepskyblue3\", color = \"black\") +\n  labs(title = \"Histogram of Extreme Wind Events by\\nWind Speed\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n    subtitle = \"A wind speed of 50 knots is the most common in\\nextreme wind events.\",\n    x = \"Magnitude - Wind Speed (knots)\",\n    y = \"Frequency\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 19), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n\n\ndata$YEAR &lt;- as.factor(data$YEAR)\n\nggplot(data, aes(x = YEAR)) +\n  geom_bar(fill = \"deepskyblue4\", color = \"black\") +\n  labs(title = \"Number of Extreme Wind Events by Year\", caption = \"Data from NOAA storm events database\",\n    subtitle = \"2008 has a slightly higher occurrence of extreme wind\\nevents.\",\n    x = \"Year\",\n    y = \"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 19), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))"
  },
  {
    "objectID": "Data_Visualization.html#variables-in-wind-devastation-categorization-zero-counts-and-non-zero-frequencies",
    "href": "Data_Visualization.html#variables-in-wind-devastation-categorization-zero-counts-and-non-zero-frequencies",
    "title": "Data Visualization",
    "section": "Variables in Wind Devastation Categorization: Zero Counts and Non-Zero Frequencies",
    "text": "Variables in Wind Devastation Categorization: Zero Counts and Non-Zero Frequencies\nSome of the variables in the wind devastation categorization have high counts of value zero. Thus, to better visualize our data, we visualized the counts of zero and non-zero data, and then plotted distributions of the non-zero values.\n\n#make category\ndata$DAMAGE_CROPS_cat &lt;- ifelse(data$DAMAGE_CROPS == 0, \"Zero\", \"Non-Zero\")\n\nggplot(data, aes(x = DAMAGE_CROPS_cat)) +\n  geom_bar(fill = \"coral1\", color = \"black\") +\n  labs(title = \"Counts of Non-Zero vs. Zero Crop Damage\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Most extreme weather events have zero crop damage.\",\n    y = \"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_blank(), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n#remove zeros\nnon_zero_DAMAGE_CROPS &lt;- data[data$DAMAGE_CROPS &gt; 0, ]\n\nggplot(non_zero_DAMAGE_CROPS, aes(x = DAMAGE_CROPS)) +\n  geom_histogram(binwidth = 10, fill = \"coral3\", color = \"black\") +\n  labs(title = \"Histogram of Non-Zero Crop Damage From\\nExtreme Wind\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Generally, there are low crop damage costs due to\\nextreme weather events.\",\n    x = \"Crop Damage (in thousands of dollars)\",\n    y = \"Frequency\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 20), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n\n\n#make category\ndata$DAMAGE_PROPERTY_cat &lt;- ifelse(data$DAMAGE_PROPERTY == 0, \"Zero\", \"Non-Zero\")\n\nggplot(data, aes(x = DAMAGE_PROPERTY_cat)) +\n  geom_bar(fill = \"darkorchid1\", color = \"black\") +\n  labs(title = \"Counts of Non-Zero vs. Zero Property\\nDamage\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"More extreme weather events have zero property\\ndamage than non-zero.\",\n    y = \"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_blank(), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n#remove zeros\nnon_zero_DAMAGE_PROPERTY &lt;- data[data$DAMAGE_PROPERTY &gt; 0, ]\n\nggplot(non_zero_DAMAGE_PROPERTY, aes(x = DAMAGE_PROPERTY)) +\n  geom_histogram(fill = \"darkorchid3\", color = \"black\") +\n  labs(title = \"Histogram of Non-Zero Property Damage\\nFrom Extreme Wind\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Generally, there are low property damage costs due to\\nextreme weather events.\",\n    x = \"Property Damage (in thousands of dollars)\",\n    y = \"Frequency\") +\n  scale_x_log10() +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 20), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n#make category\ndata$INJURIES_INDIRECT_cat &lt;- ifelse(data$INJURIES_INDIRECT == 0, \"Zero\", \"Non-Zero\")\n\nggplot(data, aes(x = INJURIES_INDIRECT_cat)) +\n  geom_bar(fill = \"darkseagreen1\", color = \"black\") +\n  labs(title = \"Counts of Non-Zero vs. Zero Indirect\\nInjuries\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Most extreme weather events have zero indirect injuries.\",\n    y = \"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_blank(), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n#remove zeros\nnon_zero_INJURIES_INDIRECT &lt;- data[data$INJURIES_INDIRECT &gt; 0, ]\n\nggplot(non_zero_INJURIES_INDIRECT, aes(x = INJURIES_INDIRECT)) +\n  geom_histogram(binwidth = 1, fill = \"darkseagreen3\", color = \"black\") +\n  labs(title = \"Histogram of Non-Zero Indirect Injuries From\\nExtreme Wind\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Generally, there are low indirect injuries due to extreme\\nweather events.\",\n    x = \"Indirect Injuries\",\n    y = \"Frequency\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 20), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n\n\n#make category\ndata$INJURIES_DIRECT_cat &lt;- ifelse(data$INJURIES_DIRECT == 0, \"Zero\", \"Non-Zero\")\n\nggplot(data, aes(x = INJURIES_DIRECT_cat)) +\n  geom_bar(fill = \"brown2\", color = \"black\") +\n  labs(title = \"Counts of Non-Zero vs. Zero Direct Injuries\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Most extreme weather events have zero direct injuries.\",\n    y = \"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_blank(), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n#remove zeros\nnon_zero_INJURIES_DIRECT &lt;- data[data$INJURIES_DIRECT &gt; 0, ]\n\nggplot(non_zero_INJURIES_DIRECT, aes(x = INJURIES_DIRECT)) +\n  geom_histogram(binwidth = 1, fill = \"brown4\", color = \"black\") +\n  labs(title = \"Histogram of Non-Zero Direct Injuries From\\nExtreme Wind\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Generally, there are low direct injuries due to extreme\\nweather events.\",\n    x = \"Direct Injuries\",\n    y = \"Frequency\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 20), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n\n\n#make category\ndata$DEATHS_INDIRECT_cat &lt;- ifelse(data$DEATHS_INDIRECT == 0, \"Zero\", \"Non-Zero\")\n\nggplot(data, aes(x = DEATHS_INDIRECT_cat)) +\n  geom_bar(fill = \"cornsilk1\", color = \"black\") +\n  labs(title = \"Counts of Non-Zero vs. Zero Indirect\\nDeaths\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Most extreme weather events have zero indirect deaths.\",\n    y = \"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_blank(), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n#remove zeros\nnon_zero_DEATHS_INDIRECT &lt;- data[data$DEATHS_INDIRECT &gt; 0, ]\n\nggplot(non_zero_DEATHS_INDIRECT, aes(x = DEATHS_INDIRECT)) +\n  geom_histogram(binwidth = 1, fill = \"cornsilk3\", color = \"black\") +\n  labs(title = \"Histogram of Non-Zero Indirect Deaths From\\nExtreme Wind\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Generally, there are low indirect deaths due to extreme\\nweather events.\",\n    x = \"Indirect Deaths\",\n    y = \"Frequency\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 20), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n\n\n#make category\ndata$DEATHS_DIRECT_cat &lt;- ifelse(data$DEATHS_DIRECT == 0, \"Zero\", \"Non-Zero\")\n\nggplot(data, aes(x = DEATHS_DIRECT_cat)) +\n  geom_bar(fill = \"darkolivegreen3\", color = \"black\") +\n  labs(title = \"Counts of Non-Zero vs. Zero Direct Deaths\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Most extreme weather events have zero direct deaths.\",\n    y = \"Count\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_blank(), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))\n\n\n\n\n\n\n\n#remove zeros\nnon_zero_DEATHS_DIRECT &lt;- data[data$DEATHS_DIRECT &gt; 0, ]\n\nggplot(non_zero_DEATHS_DIRECT, aes(x = DEATHS_DIRECT)) +\n  geom_histogram(binwidth = 1, fill = \"darkolivegreen\", color = \"black\") +\n  labs(title = \"Histogram of Non-Zero Direct Deaths From\\nExtreme Wind\", caption = \"Data from NOAA storm events database from 2008, 2013, and 2018\",\n  subtitle = \"Generally, there are low direct deaths due to extreme\\nweather events.\",\n    x = \"Direct Deaths\",\n    y = \"Frequency\") +\n  theme_minimal() + \n  theme(plot.title = element_text(size = 21, face = \"bold\"), \n    plot.subtitle = element_text(size = 17), \n    axis.title.x = element_text(size = 20), \n    axis.title.y = element_text(size = 19), \n    axis.text.x = element_text(size = 17), \n    axis.text.y = element_text(size = 17))"
  },
  {
    "objectID": "Machine_Learning_Model.html",
    "href": "Machine_Learning_Model.html",
    "title": "Machine Learning Model",
    "section": "",
    "text": "The goal of this section is to demonstrate whether or not our statistic for wind categorization can be predicted using a machine learning model. We chose a random forest model, as our variable is categorical with more than two choices. In building the model, we tuned the following hyperparameters using cross validation: number of trees, minimum samples required to be at a leaf node, and the number of features to consider at each split in a tree. During this hyperparameter tuning step, which is typically time consuming for large datasets such as ours, we used parallel computing. Future directions may consider different machine learning models to improve accuracy.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ purrr        1.0.2     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.2\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(ranger)\n\nWarning: package 'ranger' was built under R version 4.4.2\n\nlibrary(parallel)\nlibrary(future)\n\nWarning: package 'future' was built under R version 4.4.2\n\n\n\n\n\n# Read in data\nML_data &lt;- read.csv(\"ML_wind_data.csv\")\n\n# Remove variables in aggregate statistic\nML_data &lt;- ML_data %&gt;% select(-INJURIES_DIRECT, -INJURIES_INDIRECT, -DEATHS_DIRECT, -DEATHS_INDIRECT, -DAMAGE_PROPERTY, -DAMAGE_CROPS, -aggregate_stat)\n\n# Prepare remaining data for analysis -- make sure character strings are factors, etc.\nML_data &lt;- ML_data %&gt;% mutate(STATE = as.factor(STATE), YEAR = as.factor(YEAR), MONTH_NAME = as.factor(MONTH_NAME), EVENT_TYPE = as.factor(EVENT_TYPE), MAGNITUDE_TYPE = as.factor(MAGNITUDE_TYPE), scaled_aggregate = as.factor(scaled_aggregate))\n\nML_data &lt;- na.omit(ML_data)\nhead(ML_data)\n\n  EVENT_ID          STATE YEAR MONTH_NAME               EVENT_TYPE MAGNITUDE\n1    67398       ARKANSAS 2008    January        Thunderstorm Wind        50\n2   143292       ILLINOIS 2008   December        Thunderstorm Wind        65\n3   143294  LAKE MICHIGAN 2008   December Marine Thunderstorm Wind        39\n4   143297        INDIANA 2008   December        Thunderstorm Wind        52\n5    74159 SOUTH CAROLINA 2008      March        Thunderstorm Wind        55\n6    74161 SOUTH CAROLINA 2008      March        Thunderstorm Wind        50\n  MAGNITUDE_TYPE storm_time_duration change_lon change_lat scaled_aggregate\n1             EG                   0       0.00       0.00                0\n2             EG                   0       0.00       0.00                0\n3             MG                   0       0.00       0.00                0\n4             EG                   0       0.00       0.00                0\n5             EG                   0       0.00       0.00                0\n6             EG                 720       0.18       0.05                0\n\n\n\n\n\n\n# Split data into training/test sets\nset.seed(1234)\ndata_split &lt;- initial_split(ML_data, prop = 3/4)\ntrain_data &lt;- training(data_split)\ntest_data  &lt;- testing(data_split)\n\n# Define Recipe\nML_recipe &lt;- recipe(scaled_aggregate ~ ., data = train_data) %&gt;% update_role(EVENT_ID, new_role = \"ID\")\n\n# Define Random Forest Model Specs\nmodel_spec &lt;- rand_forest(mtry = tune(), trees = tune(), min_n = tune()) %&gt;%\n  set_mode(\"classification\") %&gt;%\n  set_engine(\"ranger\", importance = \"permutation\")\n\n# Create Workflow\nML_workflow &lt;- workflow() %&gt;%\n  add_recipe(ML_recipe) %&gt;%\n  add_model(model_spec)\n\n\n\n\n\n# Set up parallel computing\nnumCores &lt;- detectCores()\nplan(multisession, workers = numCores)\n\n# Run hyperparameter tuning\n## define cross validation folds\ncv_folds &lt;- vfold_cv(train_data, v = 3)\n\n## define hyperparameters to tune\nparameter_grid &lt;- grid_regular(\n  mtry(range = c(2, 7)),\n  trees(range = c(50, 250)),\n  min_n(range = c(1, 10))\n)\n\n## tune hyperparameters\ntuned_results &lt;- ML_workflow %&gt;%\n  tune_grid(resamples = cv_folds, grid = parameter_grid) \n\ntuned_results %&gt;%\n  collect_metrics()\n\n# A tibble: 81 × 9\n    mtry trees min_n .metric     .estimator  mean     n  std_err .config        \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;          \n 1     2    50     1 accuracy    multiclass 0.652     3 0.00371  Preprocessor1_…\n 2     2    50     1 brier_class multiclass 0.235     3 0.00183  Preprocessor1_…\n 3     2    50     1 roc_auc     hand_till  0.776     3 0.00194  Preprocessor1_…\n 4     4    50     1 accuracy    multiclass 0.684     3 0.00299  Preprocessor1_…\n 5     4    50     1 brier_class multiclass 0.215     3 0.00203  Preprocessor1_…\n 6     4    50     1 roc_auc     hand_till  0.797     3 0.00138  Preprocessor1_…\n 7     7    50     1 accuracy    multiclass 0.677     3 0.00297  Preprocessor1_…\n 8     7    50     1 brier_class multiclass 0.222     3 0.00222  Preprocessor1_…\n 9     7    50     1 roc_auc     hand_till  0.790     3 0.000699 Preprocessor1_…\n10     2   150     1 accuracy    multiclass 0.652     3 0.00522  Preprocessor1_…\n# ℹ 71 more rows\n\n# Return to work on one core\nplan(sequential)\n\n\n\n\n\n# Finalize workflow with best hyperparameters\nbest_params &lt;- tuned_results %&gt;%\n  select_best(metric = \"roc_auc\")\nbest_params\n\n# A tibble: 1 × 4\n   mtry trees min_n .config              \n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;                \n1     4   250    10 Preprocessor1_Model26\n\nML_workflow_final &lt;- ML_workflow %&gt;% finalize_workflow(best_params)\n\n# Train Data\ntrained_model &lt;- ML_workflow_final %&gt;%\n  fit(data = train_data)\n\n# Test data on testing data\ntest_predict &lt;- predict(trained_model, new_data = test_data) %&gt;%\n  bind_cols(test_data)\n\n\n\n\n\n# Evaluate model\nmodel_eval &lt;- test_predict %&gt;%\n  metrics(truth = scaled_aggregate, estimate = .pred_class)\n\nmodel_eval\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.690\n2 kap      multiclass     0.459\n\n# Feature Importance\nimportance &lt;- trained_model %&gt;%\n  extract_fit_engine() %&gt;%\n  ranger::importance()\n\nimportance\n\n              STATE                YEAR          MONTH_NAME          EVENT_TYPE \n        0.130906821         0.059272694         0.029812890         0.069625612 \n          MAGNITUDE      MAGNITUDE_TYPE storm_time_duration          change_lon \n        0.133540752         0.036821833         0.059528004         0.014531206 \n         change_lat \n        0.008056711"
  },
  {
    "objectID": "Machine_Learning_Model.html#description",
    "href": "Machine_Learning_Model.html#description",
    "title": "Machine Learning Model",
    "section": "",
    "text": "The goal of this section is to demonstrate whether or not our statistic for wind categorization can be predicted using a machine learning model. We chose a random forest model, as our variable is categorical with more than two choices. In building the model, we tuned the following hyperparameters using cross validation: number of trees, minimum samples required to be at a leaf node, and the number of features to consider at each split in a tree. During this hyperparameter tuning step, which is typically time consuming for large datasets such as ours, we used parallel computing. Future directions may consider different machine learning models to improve accuracy.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tibble       3.2.1\n✔ ggplot2      3.5.1     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ purrr        1.0.2     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.2\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(ranger)\n\nWarning: package 'ranger' was built under R version 4.4.2\n\nlibrary(parallel)\nlibrary(future)\n\nWarning: package 'future' was built under R version 4.4.2\n\n\n\n\n\n# Read in data\nML_data &lt;- read.csv(\"ML_wind_data.csv\")\n\n# Remove variables in aggregate statistic\nML_data &lt;- ML_data %&gt;% select(-INJURIES_DIRECT, -INJURIES_INDIRECT, -DEATHS_DIRECT, -DEATHS_INDIRECT, -DAMAGE_PROPERTY, -DAMAGE_CROPS, -aggregate_stat)\n\n# Prepare remaining data for analysis -- make sure character strings are factors, etc.\nML_data &lt;- ML_data %&gt;% mutate(STATE = as.factor(STATE), YEAR = as.factor(YEAR), MONTH_NAME = as.factor(MONTH_NAME), EVENT_TYPE = as.factor(EVENT_TYPE), MAGNITUDE_TYPE = as.factor(MAGNITUDE_TYPE), scaled_aggregate = as.factor(scaled_aggregate))\n\nML_data &lt;- na.omit(ML_data)\nhead(ML_data)\n\n  EVENT_ID          STATE YEAR MONTH_NAME               EVENT_TYPE MAGNITUDE\n1    67398       ARKANSAS 2008    January        Thunderstorm Wind        50\n2   143292       ILLINOIS 2008   December        Thunderstorm Wind        65\n3   143294  LAKE MICHIGAN 2008   December Marine Thunderstorm Wind        39\n4   143297        INDIANA 2008   December        Thunderstorm Wind        52\n5    74159 SOUTH CAROLINA 2008      March        Thunderstorm Wind        55\n6    74161 SOUTH CAROLINA 2008      March        Thunderstorm Wind        50\n  MAGNITUDE_TYPE storm_time_duration change_lon change_lat scaled_aggregate\n1             EG                   0       0.00       0.00                0\n2             EG                   0       0.00       0.00                0\n3             MG                   0       0.00       0.00                0\n4             EG                   0       0.00       0.00                0\n5             EG                   0       0.00       0.00                0\n6             EG                 720       0.18       0.05                0\n\n\n\n\n\n\n# Split data into training/test sets\nset.seed(1234)\ndata_split &lt;- initial_split(ML_data, prop = 3/4)\ntrain_data &lt;- training(data_split)\ntest_data  &lt;- testing(data_split)\n\n# Define Recipe\nML_recipe &lt;- recipe(scaled_aggregate ~ ., data = train_data) %&gt;% update_role(EVENT_ID, new_role = \"ID\")\n\n# Define Random Forest Model Specs\nmodel_spec &lt;- rand_forest(mtry = tune(), trees = tune(), min_n = tune()) %&gt;%\n  set_mode(\"classification\") %&gt;%\n  set_engine(\"ranger\", importance = \"permutation\")\n\n# Create Workflow\nML_workflow &lt;- workflow() %&gt;%\n  add_recipe(ML_recipe) %&gt;%\n  add_model(model_spec)\n\n\n\n\n\n# Set up parallel computing\nnumCores &lt;- detectCores()\nplan(multisession, workers = numCores)\n\n# Run hyperparameter tuning\n## define cross validation folds\ncv_folds &lt;- vfold_cv(train_data, v = 3)\n\n## define hyperparameters to tune\nparameter_grid &lt;- grid_regular(\n  mtry(range = c(2, 7)),\n  trees(range = c(50, 250)),\n  min_n(range = c(1, 10))\n)\n\n## tune hyperparameters\ntuned_results &lt;- ML_workflow %&gt;%\n  tune_grid(resamples = cv_folds, grid = parameter_grid) \n\ntuned_results %&gt;%\n  collect_metrics()\n\n# A tibble: 81 × 9\n    mtry trees min_n .metric     .estimator  mean     n  std_err .config        \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;    &lt;dbl&gt; &lt;chr&gt;          \n 1     2    50     1 accuracy    multiclass 0.652     3 0.00371  Preprocessor1_…\n 2     2    50     1 brier_class multiclass 0.235     3 0.00183  Preprocessor1_…\n 3     2    50     1 roc_auc     hand_till  0.776     3 0.00194  Preprocessor1_…\n 4     4    50     1 accuracy    multiclass 0.684     3 0.00299  Preprocessor1_…\n 5     4    50     1 brier_class multiclass 0.215     3 0.00203  Preprocessor1_…\n 6     4    50     1 roc_auc     hand_till  0.797     3 0.00138  Preprocessor1_…\n 7     7    50     1 accuracy    multiclass 0.677     3 0.00297  Preprocessor1_…\n 8     7    50     1 brier_class multiclass 0.222     3 0.00222  Preprocessor1_…\n 9     7    50     1 roc_auc     hand_till  0.790     3 0.000699 Preprocessor1_…\n10     2   150     1 accuracy    multiclass 0.652     3 0.00522  Preprocessor1_…\n# ℹ 71 more rows\n\n# Return to work on one core\nplan(sequential)\n\n\n\n\n\n# Finalize workflow with best hyperparameters\nbest_params &lt;- tuned_results %&gt;%\n  select_best(metric = \"roc_auc\")\nbest_params\n\n# A tibble: 1 × 4\n   mtry trees min_n .config              \n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;                \n1     4   250    10 Preprocessor1_Model26\n\nML_workflow_final &lt;- ML_workflow %&gt;% finalize_workflow(best_params)\n\n# Train Data\ntrained_model &lt;- ML_workflow_final %&gt;%\n  fit(data = train_data)\n\n# Test data on testing data\ntest_predict &lt;- predict(trained_model, new_data = test_data) %&gt;%\n  bind_cols(test_data)\n\n\n\n\n\n# Evaluate model\nmodel_eval &lt;- test_predict %&gt;%\n  metrics(truth = scaled_aggregate, estimate = .pred_class)\n\nmodel_eval\n\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.690\n2 kap      multiclass     0.459\n\n# Feature Importance\nimportance &lt;- trained_model %&gt;%\n  extract_fit_engine() %&gt;%\n  ranger::importance()\n\nimportance\n\n              STATE                YEAR          MONTH_NAME          EVENT_TYPE \n        0.130906821         0.059272694         0.029812890         0.069625612 \n          MAGNITUDE      MAGNITUDE_TYPE storm_time_duration          change_lon \n        0.133540752         0.036821833         0.059528004         0.014531206 \n         change_lat \n        0.008056711"
  },
  {
    "objectID": "Machine_Learning_Model.html#conclusion",
    "href": "Machine_Learning_Model.html#conclusion",
    "title": "Machine Learning Model",
    "section": "Conclusion",
    "text": "Conclusion\nIn the end, our model with the best hyperparameters had an accuracy of 0.6898446 and a kappa value – which measures how much better our model is than random chance (on a scale from 0 to 1) – of 0.4593361. The most important features in the model were wind magnitude and the state the event took place in. The least important features were changes in latitude and longitude, but that could be due to the fact that many wind events did not record changes in latitude and longitude. Because our accuracy and kappa values were higher than we would expect by random chance, we have shown that our statistic for wind categorization is predictable and future directions may be pursued."
  }
]